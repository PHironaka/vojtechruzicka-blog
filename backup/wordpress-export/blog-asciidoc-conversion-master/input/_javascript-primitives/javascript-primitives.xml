<item>
    <title>Javascript Primitives Guide</title>
    <link>http://vojtechruzicka.com/javascript-primitives/</link>
    <pubDate>Wed, 31 Jan 2018 07:44:26 +0000</pubDate>
    <dc:creator><![CDATA[vojtechruzicka]]></dc:creator>
    <guid isPermaLink="false">http://vojtechruzicka.com/?p=1511</guid>
    <description></description>
    <content:encoded><![CDATA[<img class="aligncenter size-full wp-image-1485" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/primitives.jpg" alt="" width="900" height="617" />
<p style="text-align: justify;">What are primitives in Javascript? What pitfalls to watch for? What are their object wrappers and when should you use them? <!--more--></p>

<div>
<h2>Primitives versus Objects</h2>
<p style="text-align: justify;">Javascript offers six primitive types: number, string, boolean, undefined, null and symbol. Everything else is not a primitive. It is an object. Dates, arrays, functions, regular expressions – everything.</p>

</div>
<p style="text-align: justify;">A simple example of an object can be a plain object created by object literal like this:</p>

<pre lang="javascript">{
   firstName: 'John',
   lastName: 'Doe'
}
</pre>
<div style="text-align: justify;">Examples of primitives are 61, 'Kitty' or false.</div>
<div></div>
<div>
<h3>Mutability</h3>
<div style="text-align: justify;">In the example above, you can see that object is basically a collection of name-value pairs. You can change their values ('mutate' them, we say that objects are mutable) or you can even add your own new properties or remove existing ones.</div>
</div>
<div></div>
<div>
<pre>var john = {
    firstName: 'John',
    lastName: 'Doe'
}

john.lastName = 'Smith';
john.age = 40;
delete john.firstName;</pre>
</div>
<div></div>
<p style="text-align: justify;">In contrast, the primitives are immutable, their value cannot be changed. You can, of course, reassign a variable with a new primitive, but the old one cannot be changed.</p>

<div></div>
<div>
<h3>Comparison</h3>
<p style="text-align: justify;">Primitives are compared by value, objects are compared by reference. What does it mean though? If you compare two primitives having the same value, they are considered equal.</p>

<div>
<div></div>
<pre lang="javascript">42 === 42 //true
'John' === 'John' //true
</pre>
<p style="text-align: justify;">However, when comparing two objects you need to be more careful. They are compared by their identity. That means it does not matter if the two objects have same properties with the same values. they are equal only if they are the same instance. That is – if comparing two variables, they are equal only if they point to the very same object.</p>

<pre lang="javascript">var john = {name: 'John', name: 'Doe'};
var stillJohn = john;
var evilTwin = {name: 'John', name: 'Doe'};

john === john //true
john === stillJohn //true
john === evilTwin //false</pre>
<p style="text-align: justify;">You can see that two variables can point to the same object. That is because variable containing object holds only a reference to that object. When you assign the reference to a new variable, now you have two variables holding the reference to the same object. That means changing properties of the object stored in either of the variables will affect them both. This does not apply to primitives as they are not using references, their value is copied instead every time. The bottom line is – be careful when passing your objects around – somebody else can change them and you will be affected. For more info check <a href="http://www.javascripttutorial.net/javascript-primitive-vs-reference-values">this tutorial</a>.</p>

<h2>Primitive Types</h2>
<div>
<h3>String</h3>
<p style="text-align: justify;">Strings are basically Unicode text, 16-bits per character. You may be surprised that string is actually primitive value as it is not that common. For example, Java has primitives as well, but String is not a primitive there. Another surprise may be that there is no type representing a single character like in many other languages. You just have to simply use a string with one char instead.</p>

<div></div>
</div>
<div>
<div>
<h3>Number</h3>
<p style="text-align: justify;">Unlike many other languages, JavaScript has just one type for representing numbers. That means no distinction between integer and decimal values, no distinction between signed and unsigned or single and double precision floating numbers. Javascript uses 64-bit floating point numbers.</p>

</div>
<p style="text-align: justify;">Except for regular numeric values, there are also some special values. There is NaN (Not a Number), which is a result of operations such as 0/0. Then there is Infinity, which can be both positive and negative. You can check for minimum and maximum values fo prevent overflow/underflow - <em>Number.MIN_VALUE</em> and <em>Number.MAX_VALUE</em>. And then, of course, there is +0 and -0 in Javascript (0 is just an alias for +0).</p>
<p style="text-align: justify;">Be careful when working with NaN as this value behaves in an unexpected way – it is the only value in javascript that is not equal to itself, that means you cannot test that something is NaN by</p>

<div>
<pre lang="javascript">something === NaN //Does not work, always false
NaN === NaN //false
</pre>
</div>
<p style="text-align: justify;">You can use <a href="http://adripofjavascript.com/blog/drips/the-problem-with-testing-for-nan-in-javascript.html">isNaN or Number.IsNaN</a> (ES6+) instead of direct comparison.</p>

<div></div>
<div>
<h3>Boolean</h3>
<p style="text-align: justify;">Boolean type contains just two values – <em>true</em> and <em>false</em>.</p>

<h3>Symbol</h3>
<p style="text-align: justify;">This is a new primitive type introduced in ES6. There is no symbol literal, so all the symbols need to be created using <em>Symbol()</em> function. Each symbol is unique, which makes them ideal for use as object properties to avoid clashes. Or in other cases where you need to have unique values. For more info see <a href="http://exploringjs.com/es6/ch_symbols.html">this post</a>.</p>

<div></div>
</div>
<div>
<div>
<h3>Null &amp; Undefined</h3>
<p style="text-align: justify;">Both <em>null</em> and <em>undefined</em> are primitive types representing the absence of value. Null is usually explicitly returned and assigned and because of this it generally represents that the value is intentionally missing. The undefined, on the other hand, means that the value does not exist in cases, such as:</p>

</div>
<div>
<ol>
 	<li>A variable was declared but not initialized</li>
 	<li>Return value of methods that do not return anything</li>
 	<li>Value of function parameters when called did not provide value</li>
 	<li>Accessing a property of an object which does not exist</li>
</ol>
<div style="text-align: justify;"></div>
</div>
<p style="text-align: justify;">One caveat to watch for and which is confusing is that even though null is a primitive, calling <em>typeof null </em><a href="https://stackoverflow.com/q/18808226/4560142">returns <em>object</em></a>. In contrast typeof undefined returns undefined.</p>

<div></div>
</div>
</div>
<div>
<h2>Object Wrappers</h2>
<p style="text-align: justify;">Alright, we know that objects have properties, which you can access using a dot. Like <em>person.name = 'john'</em>. Primitives don’t have anything like that, they are just a single value. And strings are primitives. How come that the following will work then?</p>

<div></div>
</div>
<pre lang="javascript">var name = 'John';
console.log(name.length); //prints 4
console.log(name.toUpperCase()); //prints JOHN
</pre>
<p style="text-align: justify;">String are not objects, you can try it by using:</p>

<pre lang="javascript">typeof 'John' //string
</pre>
<p style="text-align: justify;">Turns out that for certain primitives (number, boolean, string) JavaScript offers Wrapper objects, which can be used when an object is needed and provide some extra convenience methods. So what happens in the example above:</p>

<ol>
 	<li>Javascript detects that you are trying to access a property of a string primitive.</li>
 	<li>It creates a wrapper object String to wrap the original string primitive.</li>
 	<li>It accesses the length and toUpperCase on the wrapper object instead of the original primitive.</li>
 	<li>It discards the wrapper object, frees the memory and continues.</li>
</ol>
<p style="text-align: justify;">This way you can use all the helpful methods on strings to make a substring, convert it to lowercase, split it and so on. Note that primitives are immutable so all these methods just return a new instance of the string and don't modify the original.</p>

<h3>Manually creating wrappers</h3>
<p style="text-align: justify;">In the example above, JavaScript creates wrapper objects automatically under the hood. There is also a way to create such objects explicitly.</p>

<pre lang="javascript">new Number(4)
new String('Hi')
new Boolean(true)
</pre>
<p style="text-align: justify;">These are not primitives anymore, but objects, which contain the primitive value and add some extra goodies.</p>

<pre lang="javascript">typeof 4 //number
typeof 'Hi' //string
typeof true //boolean

typeof new Number(4) //object
typeof new String('Hi') //object
typeof new Boolean(true) //object
</pre>
<p style="text-align: justify;">This has some serious implications. You cannot really compare wrapper objects and primitives:</p>

<pre lang="javascript">'Hi' === new String('Hi') //false</pre>
<p style="text-align: justify;">Also, be aware that objects are considered truthy, that means that you need to watch for this:</p>

<pre lang="javascript">if (false) {
    //This does not execute
}

if (new Boolean(false)) {
    //This executes
}
</pre>
<p style="text-align: justify;">Because of this, explicitly creating wrappers using the <em>new</em> operator is considered a bad practice. On the other hand, calling the function without the <em>new</em> operator is perfectly valid as it just tries to convert the input into the corresponding primitive type and returns a primitive value.</p>

<pre lang="javascript">typeof new Number('42') //object, not recommended
typeof Number('42') //number, safe
</pre>
<h2>valueOf and toString</h2>
<div>
<p style="text-align: justify;">When you are working with objects, there are some cases when you would rather need a primitive representation of the object. Actually, javascript offers two methods for it which each object inherits:</p>

</div>
<div>
<ul>
 	<li>valueOf() returns primitive representation of the object</li>
 	<li>toString() returns string representation of the object</li>
</ul>
<p style="text-align: justify;">A good example can be Date. <em>toString()</em> returns a human-readable description of the date, while <em>valueOf()</em> returns a number representing the date as the number of passed milliseconds since 1 January 1970 00:00:00 UTC and the date.</p>

<pre lang="javascript">var date = new Date();
console.log(date.toString()); //Wed Jan 24 2018 14:12:07 GMT+0100 (Central Europe Standard Time)
console.log(date.valueOf()); //1516817671281
</pre>
<p style="text-align: justify;">You rarely need to call <em>valueOf()</em> yourself, but javascript does it under the hood when a primitive is expected, for example when using + operator. You can even define your own implementation of <em>valueOf()</em> and <em>toString()</em>:</p>

<pre lang="javascript">var john = {
    firstName: 'John',
    lastName: 'Doe',
    age: 45,
    valueOf: function () {
        return this.age;
    },
    toString: function () {
        return `${this.firstName} ${this.lastName}, ${this.age}`
    }
}

console.log(john.toString()) //John Doe, 45
console.log(john + 1) //46

</pre>
<h2>Summary</h2>
<p style="text-align: justify;">Javascript provides six primitive types – number, boolean, string, null, undefined and symbol. Primitives are immutable and are compared by value. When needed, Javascript wraps a primitive by an object wrapper. It is not recommended to create these wrappers explicitly. If the conversion needs to be done the other way around – from an object to a prototype, the <em>valueOf</em> method is called to obtain a primitive value. You can use your own implementation of <em>valueOf</em>.</p>

</div>
</div>
</div>]]></content:encoded>
    <excerpt:encoded><![CDATA[]]></excerpt:encoded>
    <wp:post_id>1511</wp:post_id>
    <wp:post_date><![CDATA[2018-01-31 08:44:26]]></wp:post_date>
    <wp:post_date_gmt><![CDATA[2018-01-31 07:44:26]]></wp:post_date_gmt>
    <wp:comment_status><![CDATA[open]]></wp:comment_status>
    <wp:ping_status><![CDATA[open]]></wp:ping_status>
    <wp:post_name><![CDATA[javascript-primitives]]></wp:post_name>
    <wp:status><![CDATA[publish]]></wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type><![CDATA[post]]></wp:post_type>
    <wp:post_password><![CDATA[]]></wp:post_password>
    <wp:is_sticky>0</wp:is_sticky>
    <category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
        <wp:meta_value><![CDATA[Javascript Primitives Guide]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
        <wp:meta_value><![CDATA[What are primitives in Javascript? What pitfalls to watch for? What are their object wrappers and when should you use them?]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
        <wp:meta_value><![CDATA[30]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
        <wp:meta_value><![CDATA[24]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
        <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1518218665;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1548;}i:1;a:1:{s:2:"id";i:236;}i:2;a:1:{s:2:"id";i:806;}}}}]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
    <wp:comment>
        <wp:comment_id>274</wp:comment_id>
        <wp:comment_author><![CDATA[VR]]></wp:comment_author>
        <wp:comment_author_email><![CDATA[vojtechruz@gmail.com]]></wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP><![CDATA[141.228.106.149]]></wp:comment_author_IP>
        <wp:comment_date><![CDATA[2018-01-31 19:18:00]]></wp:comment_date>
        <wp:comment_date_gmt><![CDATA[2018-01-31 18:18:00]]></wp:comment_date_gmt>
        <wp:comment_content><![CDATA[New operator can be confusing especially for developers coming from a different  object oriented programming languages. Let's look at the following example:

var person = new Person('John', 'Doe');

When a java developer new to Javascript sees this, they automatically start to assume things. The thing is that unlike many languages, which use class based inheritance, javascript uses prototype based inheritance. What's the difference?

What does Javascript's new operator do? What are constructor functions? Why is new criticised and what are the alternatives?

Creating objects
In your applications, most of the time you don't work with primitives (TODO link) but rather objects. You can directly created objects with object literals like this:

varPerson={
firstName:'John',
lastName:'Doe'
}

This is sometimes good enough, but in many cases you want to work with many objects, which share the same characteristics - that is: they have the same properties and methods. These can be users in you applications, bank accounts, cars or anything else. The point is, you'll want to work with 'Jane' and 'John' in the same way because they can both be considered a person - have name, surname, age and so on.

Allright, so how do you create objects which have the same methods and properties? Using constructor functions and new operator.

The new operator

Let's consider the following example:

var Person = function(firstName,lastName){
    this.firstName=firstName;
   this.lastName=lastName;
}

var john = new Person('John','Doe');

Person is a constructor function. Its whole purpose is to create new objects which represent different persons. We can be sure that each person will have the first name and the last name, which are provided as parameters to this function. Notice that unlike regular functions, constructors begin by convention with a capital letter. This way you can easily tell them apart from ordinary functions.

Then we are creating a specific person instance called john with firstName John and LastName Doe. Notice that there is a new keyword before the Person constructor function call. It is actually an operator and it is responsible for all the magic when creating new persons. It does actually quite a lot:

1.It creates a new blank object.
2.It makes this to point to this newly created object inside the constructor function
3. It sets the prototype of the newly created object to the constructor function's prototype.
4.It makes the constructor function return the newly created object IF it is not returning anyhing.

That is the reason why john is created even though the function Person does not have explicit return statement. That's the reason why using this.firstName=firstName; sets the firstname provided to the new object. Without the new keyword, this would point to the global object in this and not to the newly created instance.






What if I forget to include new?
There are some serious problems when using the new operator. In languages such as Java, it is strictly limited how you can use the new keyword. It can be used only to invoke methods, which are explicitly marked as constructors. Constructors are guaranteed to return a new instance of the class, performing all the required initialization. Constructors can be invoked only using the new keyword and the new keyword can be used only to invoke constructors.

In javascript the situation is unfortunately not so strict.
- You can use new operator on ANY function
- You can call function indended as constructor WITH or WITHOUT the new keyword

So, calling function not designed as constructor will not result in an error. What's more you'll get different behavior based on whether you call constructor with or without the new keyword. And it is really easy forget to include new. After all, there is no compile-time check as in Java. Lets look at an example.

varPerson=function(firstName,lastName){
   this.firstName=firstName;
  this.lastName=lastName;
}

varjohn=newPerson('John','Doe');
varjane=Person('Jane','Doe');

First, there is a constructor function person and then it is called twice. Once with new and once without. Can you guess what each variable contains?

varPerson=function(firstName,lastName){
this.firstName=firstName;
this.lastName=lastName;
}

console.log(john)//Person{firstName:'John',lastName:'Doe'}
console.log(jane)//undefined
console.log(window)//Ohdear!globalobjectnowhasfirstNameandlastName!

What just happened? Looks like john is doing well, but poor Jane is undefined. What's worse, it looks like firstName and lastName got stored on the global object (window in case of running in browser). So my precious new object is undefined and I am polluting the global object instead. Nasty.

The reason why is that one of the actions new operator does is changing this, so it points to the newly created object. When new is not specified, the constructor is considered an ordinary function call and this remains the same as usual. In this case, when I just declared a function on the top level and called it from the top level, this is pointing to the global object. Global object differs in each environment (browser / server side javascript), but in browser it is window. that means I am now storing my properties directly on the window object.

Another action that new operator does is that makes the newly created object result of the whole new expression if the function does not return object specifically. It is the case here as you can see that the Person constructor does not explicitly call return (and yet, John is sucessfully created). When called without new, it is just a regular function call. And functions without explicit return statement return undefined.

Protecting against forgetting to include new
Alright, forgetting new operator can have pretty nasty consequences. So what can you do to prevent such cases?

	Capital letter convention
	You should always stick to the convention that constructor functions start wit ha capital letter and regular functions with a lowercase letter. This way you can immediately see that something is fishy when encountering situation such as:

	var person = Person('John','Doe');//capital letter, I should use new

	It is also helful when constructor names are nouns and regular functions are verbs:

	var size = new computeSize();//lowecase letter;  computeSize doesn't sound like object

	Explicit check of this
	Remember how one of the things new operator does is changing this to the newly creating object and setting the prototype? On of the ways how to defend against accidental ommission of new operator is check what actually this points to in the constructor function.

	varPerson=function(firstName,lastName){

	if(!(thisinstanceofPerson)){
	  returnnewPerson(firstName,lastName);
	}

	  this.firstName=firstName;
	  this.lastName=lastName;
	}

	This way if this is not instance of person, we can detect it and properly call the constructor again and make sure we add the new keyword to the call. This way the result is same no matter whether you use the new keyword for your constructor or not.

	The disadvantage is that it encourages developers to not worry about using new as it is still safe. Building such habit is not good as not all the code yo'll work with will always have such safeguards. it is much better to stick to convention of always using new instead of just sometimes and have the usage inconsistent across the codebase. As and alternative, you may consider to use the check but to throw an error to fai fast and discover improper usage of your constructors early on.


	Strict mode
	You can enable strict mode in your script or just a part of it using "use strict";. This basically makes  some of the weird  constructs result in real errors instead of silently failing or resulting into unexpected and unwanted behavior. An example can be usage of undeclared variable.

	One of the issues it addresses is pointing this to global context (window) when not calling a function as a method of an object. When the strict mode is activated, this is undefined instead of pointing to the global object. forgetting the new operator before a constructor call would then result in an error saying that this is undefined. You would discover your mistake early on when the strict mode is enabled. Sometimes you cannot affort to use global strict mode as it would break all your existing code. In such cases youcan always enable strict mode just for the function.

	varPerson=function(firstName,lastName){
	"use strict";
	this.firstName=firstName;//TypeError:Cannotsetproperty'firstName'ofundefined
	this.lastName=lastName;
	}


	Object.create
	All the previous examples were still using new operator, but were trying to protect you from accidentally forgetting it. This one takes a completely different approach and does not use new at all.




	Classes
	In EcmaScript 6, there is a new concept of classes, which aims to replace constructor functions and addresses its issues. The person from our examples above as a class would look like this.

	classPerson{
	constructor(firstName,lastName){
	this.firstName=firstName;
	this.lastName=lastName;
	}
	}

	You can create new persons like usual:

	varjohn=newPerson('John','Doe');

	What's really cool is that if you accidentally forget to include the new keyword when creating a new instance it results in error instead of silently altering global object.

	varjohn=newPerson('John','Doe');//Person{firstName:'John',lastName:'Doe'}
	varjane=Person('Jane','Doe');//TypeError:ClassconstructorPersoncannotbeinvokedwithout'new'

	What is unfortunate is that with classes and their syntax javascript gives a false impression that it uses class based inheritance. Developers coming from other languages like java are expecially vulnerable to this. Instead Javascript still uses prototype based inheritance and classes are just a syntactic sugar on top of good old constructor functions.

	TODO link https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes

Conclusion
When using constructor functions, make sure you don't forget the new operator. Otherwise weird things will happen. Stick to the naming conventions. The strict mode is your friend and should protect you against accidental ommission. And of course, if you can use ES6, classes are a foolproof way to replace constructor function. Don’t get fooled though. Even though it does sound like class based inheritance, it is just a syntactic sugar and Javascript has still prototype based inheritance.]]></wp:comment_content>
        <wp:comment_approved><![CDATA[trash]]></wp:comment_approved>
        <wp:comment_type><![CDATA[]]></wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
            <wp:meta_value><![CDATA[false]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1517422680.13239002227783203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1517428140.87016391754150390625;s:5:"event";s:12:"status-trash";s:4:"user";s:14:"vojtechruzicka";}]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
            <wp:meta_value><![CDATA[1517428140]]></wp:meta_value>
        </wp:commentmeta>
    </wp:comment>
</item>