<item>
    <title>Avoid Utility Classes</title>
    <link>http://vojtechruzicka.com/avoid-utility-classes/</link>
    <pubDate>Tue, 07 Mar 2017 12:25:32 +0000</pubDate>
    <dc:creator><![CDATA[vojtechruzicka]]></dc:creator>
    <guid isPermaLink="false">http://vojtechruzicka.com/?p=734</guid>
    <description></description>
    <content:encoded><![CDATA[<img class="aligncenter wp-image-732 size-full" src="http://vojtechruzicka.com/wp-content/uploads/2017/03/bigstock-Small-Utility-Knife-120213158.jpg" alt="Utility Class" width="900" height="675" />
<p style="text-align: justify;">Utility classes, while popular, have some serious implications and you should think twice before using them.</p>
<!--more-->
<h2>What is Utility Class?</h2>
<div style="text-align: justify;">Utility Class, also known as Helper class, is a class, which contains just static methods, it is stateless and cannot be instantiated. It contains a bunch of related methods, so they can be reused across the application. As an example consider Apache StringUtils, CollectionUtils or java.lang.Math.</div>
<div></div>
<h3></h3>
<h3>Implementation</h3>
<div style="text-align: justify;">Utility Class is usually declared final so it cannot be subclassed. The constructor is declared as private with an explaining comment and even possible exception when invoked. With a private constructor declared, the default one is not generated and class cannot be instantiated by other classes.</div>
<div></div>
<div></div>
&nbsp;
<pre lang="java">public final class UtilityClass {

    // Private constructor to prevent instantiation
    private UtilityClass() {
        throw new UnsupportedOperationException();
    }

    //public static methods here

}
</pre>
<h2>Why are Util Classes so common?</h2>
<div style="text-align: justify;">By the OOP principles,  an object should contain both data and a behavior performed over that data. Utility classes are just behavior, all the data are passed as inputs. It is in no way Object Oriented, it is a more of a Procedural way of thinking. When switching to OOP, developers with a procedural mindset usually used a lot of utility classes as it is closer to their way of thinking. Unnecessary Util Classes became very common even if there was a good OO alternative. And most people didn’t question the pattern as it was so widespread.</div>
<div style="text-align: justify;"></div>
<div style="text-align: justify;"></div>
<div style="text-align: justify;">These days, it is more about convenience. First of all, it is much easier to use Util Classes than regular ones, because there is no need to instantiate them, so it is just less code and overall simpler. The second of all, Util Classes are a convenient stash of methods which do not belong anywhere else. When adding some new functionality it is much easier to put it in some generic Util Class, which already contains various methods barely having anything in common than to actually think about proper OO design.</div>
<h2></h2>
<h2>The Downside</h2>
The main problem is that a class depending on a static method from a Utility Class has tight coupling. You are using a specific external dependency, not an abstraction. There is no way to switch that dependency under various circumstances. Usually, you would be able to provide a subclass of that dependency instead or another dependency implementing the interface. You lose completely that flexibility.
<h3>Testing</h3>
<p style="text-align: justify;">Since you have a hard dependency on the Util Class you cannot easily provide a mock implementation. That makes testing rather difficult. You cannot isolate dependencies on Utility Classes and test just your class in isolation. Therefore you are testing all your static dependencies as well. <a href="http://misko.hevery.com/about/">Miško Hevery</a> has a nice article about that - <a href="http://misko.hevery.com/2008/12/15/static-methods-are-death-to-testability/">Static Methods are Death to Testability</a>.</p>

<h3>Inversion of Control</h3>
<p style="text-align: justify;">Ideally, a class should not be responsible for obtaining its own dependencies. They should be externally injected through constructors or setters without class knowing specific implementation. This can be managed by Dependency Injection containers or manually, for example in tests. Depending on needs, different implementations can be provided. In case of setters, the behavior can be changed even in runtime. This is not possible when using Utility Classes.</p>
<p style="text-align: justify;">When all the dependencies are provided externally, the class does not suffer from "dependency hiding". From the class's public interface it is obvious, which dependencies it requires to proper function. It is still not a violation of encapsulation as the class just clearly states its collaborators, but does not reveal the way of using them to perform its core purpose.</p>

<h3>Proxying</h3>
<p style="text-align: justify;">Many frameworks depend on dynamic proxies for adding additional functionality to class instances. Consumers are provided with a proxy instead of a regular instance. It has the required type but provides some other behavior on top of that. For example, you can add method-level security restricting access to methods unless the user has a specific role. Another example can be adding AOP logging to method calls (which is not a core responsibility of the class but rather cross-cutting concern and should be managed externally). Such behavior cannot be added to classes using dynamic proxies.</p>

<h3>Single Responsibility</h3>
<p style="text-align: justify;">As already mentioned, a class using Utility Class is responsible not only for its original role, but also for obtaining its dependencies. Another problem is that existing Utility Classes have tendencies to rot. Usually, such classes are created from a code, which has no better or proper place to be. Over time, if you are not very strict, these classes tend to accumulate more and more code, which may be not so related to the original methods. The class would lose its original single responsibility and become a jack-of-all-trades .</p>

<h2>Alternatives</h2>
<p style="text-align: justify;">In most of the cases, it is preferable to add behavior directly to the already existing classes as non-static methods. This way, proper OO design is maintained without any of the downsides of the static methods.</p>
<p style="text-align: justify;">If there is no such place to put that logic in, it is still better to create a new class with the desired behavior. But not as an Util Class with static methods, but as a regular class, which needs to be instantiated and can be subclassed. In such case, this dependency should be provided to the consumer class via a constructor or setter. It is slightly more code and less convenient but the benefits far outweigh this.</p>
<p style="text-align: justify;">If you decide, in spite of all the drawbacks, to use Utility Classes, make sure at least to separate logic well into different classes so you do not end with almighty god Utility Class containing various unrelated functionalities.</p>

<h2>Conclusion</h2>
<div style="text-align: justify;">I wouldn’t go as far as saying that utility classes are evil and should never ever be used. However, when creating one, think twice. Be aware of all the implications of such approach. Maybe you there is already a class where that functionality would fit. Maybe you can use a regular instantiable class instead. Should it really be a util class or are you just too lazy to find a proper place to put the new logic in?</div>]]></content:encoded>
    <excerpt:encoded><![CDATA[]]></excerpt:encoded>
    <wp:post_id>734</wp:post_id>
    <wp:post_date><![CDATA[2017-03-07 13:25:32]]></wp:post_date>
    <wp:post_date_gmt><![CDATA[2017-03-07 12:25:32]]></wp:post_date_gmt>
    <wp:comment_status><![CDATA[open]]></wp:comment_status>
    <wp:ping_status><![CDATA[open]]></wp:ping_status>
    <wp:post_name><![CDATA[avoid-utility-classes]]></wp:post_name>
    <wp:status><![CDATA[publish]]></wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type><![CDATA[post]]></wp:post_type>
    <wp:post_password><![CDATA[]]></wp:post_password>
    <wp:is_sticky>0</wp:is_sticky>
    <category domain="category" nicename="oop"><![CDATA[OOP]]></category>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
        <wp:meta_value><![CDATA[732]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
        <wp:meta_value><![CDATA[60]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
        <wp:meta_value><![CDATA[16]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
        <wp:meta_value><![CDATA[Avoid Utility Classes]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
        <wp:meta_value><![CDATA[Utility classes, while popular, have some serious implications and you should think twice before using them.]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
        <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1514861381;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:236;}i:1;a:1:{s:2:"id";i:426;}i:2;a:1:{s:2:"id";i:806;}}}}]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
    <wp:comment>
        <wp:comment_id>38</wp:comment_id>
        <wp:comment_author><![CDATA[Vojtech Ruzicka]]></wp:comment_author>
        <wp:comment_author_email><![CDATA[vojtech.ruz@gmail.com]]></wp:comment_author_email>
        <wp:comment_author_url>http://vojtechruzicka.com</wp:comment_author_url>
        <wp:comment_author_IP><![CDATA[155.91.28.237]]></wp:comment_author_IP>
        <wp:comment_date><![CDATA[2017-03-11 11:44:16]]></wp:comment_date>
        <wp:comment_date_gmt><![CDATA[2017-03-11 10:44:16]]></wp:comment_date_gmt>
        <wp:comment_content><![CDATA[Good Idea, it should be pretty straightforward to detect utility classes by static code analysis tools such as SonarQube. You would need to implement a custom rule for that. IT should not be so hard as there is usually a rule for private constructor in utility classes, so you could start from that one (detection of Util Class is already part of that rule).]]></wp:comment_content>
        <wp:comment_approved><![CDATA[1]]></wp:comment_approved>
        <wp:comment_type><![CDATA[]]></wp:comment_type>
        <wp:comment_parent>37</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
            <wp:meta_value><![CDATA[jetpack]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
            <wp:meta_value><![CDATA[https://s2.wp.com/wp-content/mu-plugins/highlander-comments/images/wplogo.png]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
            <wp:meta_value><![CDATA[1]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
            <wp:meta_value><![CDATA[false]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1489229056.927977085113525390625;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"vojtechruzicka";}]]></wp:meta_value>
        </wp:commentmeta>
    </wp:comment>
    <wp:comment>
        <wp:comment_id>37</wp:comment_id>
        <wp:comment_author><![CDATA[Tomas Votruba]]></wp:comment_author>
        <wp:comment_author_email><![CDATA[tomas.vot@gmail.com]]></wp:comment_author_email>
        <wp:comment_author_url>http://schmutzka.eu</wp:comment_author_url>
        <wp:comment_author_IP><![CDATA[46.135.255.0]]></wp:comment_author_IP>
        <wp:comment_date><![CDATA[2017-03-10 03:50:23]]></wp:comment_date>
        <wp:comment_date_gmt><![CDATA[2017-03-10 02:50:23]]></wp:comment_date_gmt>
        <wp:comment_content><![CDATA[Hey Vojta, thanks for the post. I completely agree with you.

Could you imagine having a Sniff for Code Sniffer that would check these rules?

That would be great way to teach it by context.]]></wp:comment_content>
        <wp:comment_approved><![CDATA[1]]></wp:comment_approved>
        <wp:comment_type><![CDATA[]]></wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
            <wp:meta_value><![CDATA[wordpress]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
            <wp:meta_value><![CDATA[https://0.gravatar.com/avatar/3d483e27187c3fa3d88dd95891da7665?s=25&d=https%3A%2F%2Fs2.wp.com%2Fwp-content%2Fmu-plugins%2Fhighlander-comments%2Fimages%2Fwplogo.png&r=G]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
            <wp:meta_value><![CDATA[1651420]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[hc_wpcom_id_sig]]></wp:meta_key>
            <wp:meta_value><![CDATA[fb1f0f870c8cc91d9ed3a6c827ce9e26316ab755]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1489147588.349050998687744140625;s:5:"event";s:15:"status-approved";s:4:"user";s:14:"vojtechruzicka";}]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
            <wp:meta_value><![CDATA[false]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1489114223.6548840999603271484375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
        </wp:commentmeta>
    </wp:comment>
    <wp:comment>
        <wp:comment_id>245</wp:comment_id>
        <wp:comment_author><![CDATA[Penguin Monkey]]></wp:comment_author>
        <wp:comment_author_email><![CDATA[aoeu512@gmail.com]]></wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP><![CDATA[97.103.70.182]]></wp:comment_author_IP>
        <wp:comment_date><![CDATA[2018-01-01 15:49:37]]></wp:comment_date>
        <wp:comment_date_gmt><![CDATA[2018-01-01 14:49:37]]></wp:comment_date_gmt>
        <wp:comment_content><![CDATA[These problems with utility classes are less problematic in Python/JavaScript /Scala than in Java/C# because you can switch static classes/namespaces easily(math = mymath), and they have support for first-order functions resulting in dramatically less code since you don't have to build complex OOP hierarchies and constructors.

import mymath
math = mymath
def weirdFunc(angle, cos=math.cos, sin=math.sin):
  return cos(angle) + sin(angle)

weirdFunc(5.0, cos = customCosMethod)]]></wp:comment_content>
        <wp:comment_approved><![CDATA[1]]></wp:comment_approved>
        <wp:comment_type><![CDATA[]]></wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1514818506.0075199604034423828125;s:5:"event";s:15:"status-approved";s:4:"user";s:14:"vojtechruzicka";}]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
            <wp:meta_value><![CDATA[false]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1514818178.0111000537872314453125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
        </wp:commentmeta>
    </wp:comment>
    <wp:comment>
        <wp:comment_id>246</wp:comment_id>
        <wp:comment_author><![CDATA[Vojtech Ruzicka]]></wp:comment_author>
        <wp:comment_author_email><![CDATA[vojtech.ruz@gmail.com]]></wp:comment_author_email>
        <wp:comment_author_url>http://vojtechruzicka.com</wp:comment_author_url>
        <wp:comment_author_IP><![CDATA[80.243.99.152]]></wp:comment_author_IP>
        <wp:comment_date><![CDATA[2018-01-01 15:57:41]]></wp:comment_date>
        <wp:comment_date_gmt><![CDATA[2018-01-01 14:57:41]]></wp:comment_date_gmt>
        <wp:comment_content><![CDATA[Thank you for this example, is it definitely true, my post was written from the perspective of Java but it is not so problematic in some other languages.]]></wp:comment_content>
        <wp:comment_approved><![CDATA[1]]></wp:comment_approved>
        <wp:comment_type><![CDATA[]]></wp:comment_type>
        <wp:comment_parent>245</wp:comment_parent>
        <wp:comment_user_id>1</wp:comment_user_id>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
            <wp:meta_value><![CDATA[false]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1514818661.39793109893798828125;s:5:"event";s:9:"check-ham";s:4:"user";s:14:"vojtechruzicka";}]]></wp:meta_value>
        </wp:commentmeta>
    </wp:comment>
</item>