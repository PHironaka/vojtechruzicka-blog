<item>
    <title>Web Page Audit with Chrome Developer Tools and Lighthouse</title>
    <link>http://vojtechruzicka.com/chrome-audit-lighthouse/</link>
    <pubDate>Mon, 22 Jan 2018 08:22:43 +0000</pubDate>
    <dc:creator><![CDATA[vojtechruzicka]]></dc:creator>
    <guid isPermaLink="false">http://vojtechruzicka.com/?p=1466</guid>
    <description></description>
    <content:encoded><![CDATA[<img class="aligncenter wp-image-1467 size-full" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/bigstock-132648107.jpg" alt="" width="900" height="600" />
<p style="text-align: justify;">Did you know Chrome can perform a comprehensive audit of a web page and analyze many different categories such as Performance, SEO, Best Practices, Accessibility, Progressive Web Application compliance and more?</p>
<!--more-->
<h2>Running an Audit</h2>
<p style="text-align: justify;">In version 60, Chrome introduced a great new addition to its Developer Tools. It is a comprehensive Audit feature for web pages powered by a tool called Lighthouse. It is an open source tool available on <a href="https://github.com/GoogleChrome/lighthouse">GitHub</a>. To run an audit, you need to open Chrome Dev Tools (F12) and select <em>Audit</em> tab:</p>

<div></div>
<div><img class="aligncenter size-full wp-image-1471" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/chrome-audit.jpg" alt="" width="1161" height="1015" /></div>
<div></div>
<p style="text-align: justify;">Then you click the <em>Perform an Audit</em> button and select the categories in which you want to perform an analysis. Then just click <em>Run Audit</em>:</p>

<div></div>
<div><img class="aligncenter size-full wp-image-1472" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/chrome-audit-run.jpg" alt="" width="1265" height="912" /></div>
<div></div>
<p style="text-align: justify;">Chrome now analyzes your page for various potential problems in the selected categories. After the audit is done, you receive a score in each of the categories up to 100 points:</p>

<div></div>
<div><img class="aligncenter size-full wp-image-1473" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/chrome-audit-score.jpg" alt="" width="1544" height="192" /></div>
<div></div>
<h2>Categories</h2>
<p style="text-align: justify;">In each of the categories, the score is computed based on checks which failed and which passed. You can see exactly what was successful, what not and can read details about each check. On top of this, some categories contain a list of additional manual checks - steps which cannot be validated automatically but are still important and worth testing.</p>

<h3>Performance</h3>
<p style="text-align: justify;">The first category is Performance. No doubt very important area to focus on. Especially since many users tend to have a low-quality network connection or access your site from mobile devices. Lighthouse takes this into consideration and simulates slow network connection and slow CPU. You may be surprised how bad your site performance is under such circumstances.</p>
<p style="text-align: justify;">Lighthouse also measures when your page first displays some meaningful information, when it becomes interactive and when it is fully operational.</p>
<img class="aligncenter size-full wp-image-1476" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/chrome-audit-performance-metrics.jpg" alt="" width="1720" height="859" />
<p style="text-align: justify;">But what's really useful is that the tool recommends you different ways how to increase the performance in your case with real data - that is how much time can you actually save by addressing various issues.</p>
<img class="aligncenter size-full wp-image-1477" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/chrome-audit-performance-opportunities.jpg" alt="" width="1717" height="789" />
<h3>Progressive Web App</h3>
<p style="text-align: justify;">Progressive Web Applications is a set of design principles and guidelines by Google. It should result in a smooth user experience similar to native Mobile Application. It utilizes service workers so the application can work on low-quality networks or even offline. And when online it has always up-to-date data. It should be loaded over HTTPS only, use push notifications and provide excellent load times and performance. To learn more try - <a href="https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/">Your First PWA</a>.</p>
<p style="text-align: justify;">What Lighthouse does is that it tests your app against <a href="https://developers.google.com/web/progressive-web-apps/checklist">this PWA checklist.</a></p>

<h3>Accessibility</h3>
<p style="text-align: justify;">This section covers accessibility, that means making sure your app is usable by as many users as possible. That typically means that users with some kind of impairment or disability have as smooth experience as possible. That includes, but is not limited to, providing enough metadata for screen readers - such as ARIA attributes. The structure of your content needs to take this into account as well and you should make sure you use proper semantic elements (such as <em>strong</em> vs <em>b</em>). Your images should have proper alt attributes, form fields should have label elements attached and so on. <a href="https://developers.google.com/web/fundamentals/accessibility/">This accessibility guide</a> summarizes this nicely.</p>

<h3>Best Practices</h3>
<p style="text-align: justify;">This category contains various miscellanious items, such as using deprecated constructs, HTTP/2, HTTPS, console logging, password field handling and more. One item which I found really interesting and important is Detection of Javascript libraries with <a href="http://vojtechruzicka.com/detecting-dependencies-known-vulnerabilities/">known security vulnerabilities</a>. This is based on integration with a third-party tool called <a href="http://vojtechruzicka.com/snyk-detecting-dependencies-with-known-vulnerabilities/">Snyk</a>.</p>
<img class="aligncenter size-full wp-image-1478" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/chrome-audit-best-practices.jpg" alt="" width="1758" height="953" />
<h3>SEO</h3>
<p style="text-align: justify;">This is a new category, not available in older versions of Lighthouse. It covers Search Engine Optimization. It covers mainly that your app contains enough metadata for search engines, such as HTML header meta tags, title, that page is not blocked from indexing, links have descriptive text and so on.</p>

<h2>Lighthouse CLI and more tools</h2>
<h3>Google chrome extension</h3>
<p style="text-align: justify;">Originally, before Lighthouse was integrated as a part of Chrome Dev Tools, it was available as a standalone Chrome extension. And it still is. This may be handy if you are stuck with an older version of Chrome. Or If you want to try the newest features of Lighthouse. That's because stable Chrome does not include the latest and Greatest version of Lighthouse, but the extension does.</p>

<h3>Command Line Interface</h3>
<p style="text-align: justify;">Having Lighthouse integration directly in Chrome is neat, however, it has its limitations. You are likely to run the audit several times when it is still new and shiny or during initial development. Or when you remember to do so. But there is a constant risk that new changes will impact the performance or violate some best practices. It is much better to integrate the audit as a part of your build process to automate the whole audit thing.</p>
<p style="text-align: justify;">Fortunately, Lighthouse is available as a <a href="https://github.com/GoogleChrome/lighthouse#using-the-node-cli">Command Line utility</a> distributed as NPM package. It is also handy for cases where you need a more fine-grained configuration as it offers greater customization than Dev Tools currently. To make things even easier for your build, it offers a <a href="https://github.com/addyosmani/webpack-lighthouse-plugin">Webpack Plugin</a>.</p>

<h3>Lighthouse as a Service</h3>
<p style="text-align: justify;">If you want lighthouse integration even simpler there is a tool called <a href="https://medium.com/@alekseykulikov/treo-lighthouse-as-a-service-55cb9b72e8c3">Treo</a>. It basically is Lighthouse as a Service. It offers a nice GitHub integration as well as means of breaking the build in case the expectations are not met.</p>

<h2>Chrome Canary</h2>
<p style="text-align: justify;">Note that at the time of writing the latest version of chrome, 63, includes Lighthouse 2.5.1, which does not include some of the features described in this post. For example the whole SEO category. This post was written based on Chrome Canary 66, which includes Lighthouse 2.8.0. <a href="https://www.techworld.com/developers/what-is-chrome-canary-should-you-use-it-3664390/">Chrome Canary</a> includes all the new features which will stable release contain in the future but are not yet fully tested, stable or even finalized.</p>

<h2>Conclusion</h2>
<p style="text-align: justify;">Lighthouse offers a nice way to test your web app for performance issues, PWA compliance, SEO, Accessibility and other best practices. Even though the tool is integrated nicely with Chrome Developer Tools, you may want to consider integrating it with your build process to continuously check for possible problems.</p>]]></content:encoded>
    <excerpt:encoded><![CDATA[]]></excerpt:encoded>
    <wp:post_id>1466</wp:post_id>
    <wp:post_date><![CDATA[2018-01-22 09:22:43]]></wp:post_date>
    <wp:post_date_gmt><![CDATA[2018-01-22 08:22:43]]></wp:post_date_gmt>
    <wp:comment_status><![CDATA[open]]></wp:comment_status>
    <wp:ping_status><![CDATA[open]]></wp:ping_status>
    <wp:post_name><![CDATA[chrome-audit-lighthouse]]></wp:post_name>
    <wp:status><![CDATA[publish]]></wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type><![CDATA[post]]></wp:post_type>
    <wp:post_password><![CDATA[]]></wp:post_password>
    <wp:is_sticky>0</wp:is_sticky>
    <category domain="post_tag" nicename="chrome"><![CDATA[chrome]]></category>
    <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
        <wp:meta_value><![CDATA[1467]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
        <wp:meta_value><![CDATA[Web Page Audit with Chrome Developer Tools and Lighthouse]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
        <wp:meta_value><![CDATA[60]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
        <wp:meta_value><![CDATA[Did you know chrome can perform a comprehensive audit of a web page and analyze many different categories such as Performance, SEO, Best Practices, Accessibility, Progressive Web Application compliance and more?]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
        <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1517389335;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:959;}i:1;a:1:{s:2:"id";i:1389;}i:2;a:1:{s:2:"id";i:1305;}}}}]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
    <wp:comment>
        <wp:comment_id>262</wp:comment_id>
        <wp:comment_author><![CDATA[VR]]></wp:comment_author>
        <wp:comment_author_email><![CDATA[vojtechruz@gmail.com]]></wp:comment_author_email>
        <wp:comment_author_url></wp:comment_author_url>
        <wp:comment_author_IP><![CDATA[141.228.106.147]]></wp:comment_author_IP>
        <wp:comment_date><![CDATA[2018-01-24 14:30:20]]></wp:comment_date>
        <wp:comment_date_gmt><![CDATA[2018-01-24 13:30:20]]></wp:comment_date_gmt>
        <wp:comment_content><![CDATA[What are primitives in Javascript? What pitfalls to watch for? What are their object wrappers and when should you use them?


Primitives versus Objects
Javascript offers six primitive types : number, string, boolean, undefined, null and symbol. Everything else is not a primtive. It is an object. Dates, arrays, function, regular expressions - everything.

A simple example of an object can be a plain object created by object literal like this:

{
    firstName: 'John',
    lastName: 'Doe'
}

Mutability
In the example above, you can see that object is basically a collection of name-value pairs. You can change their values ('mutate' them, we say that objects are mutable) or you can even add your own new properties or remove old ones.

TODO example

In contrast, the primitives are immutable, their value cannot be changed. You can of course reassign a variable with a new primitive, but the old one cannot be changed.

Comparison
Primitives are compared by value, objects are compared by reference. What does it mean though?

If you compare two primitives having the same value, they are considered equal

42 === 42 //true
'John' === 'John' //true

However, when comparing two objects you need to be more careful. They are compared by their identity. That means it does not matter if the two objects have same properties with the same values. they are equal only if they are the same instance of objects. That is - if comparing two variables, they are equal only if they point to the very same object.

var john = {name: 'John', name: 'Doe'};
var stillJohn = john;
var evilTwin = {name: 'John', name: 'Doe'};

john === evilTwin //false
john === john //true
john === stillJohn //true

You can see that two variables can point to the same object. That is because variable containg object holds only a reference to that object. When you assign the reference to a new variable, now you have two variables holding the reference to the same object. That means changing properties of the object stored in either of the variables will affect hem both. This does not apply for primitives as their are not using references, their value is compied instead everytime. The bottom line is - be careful when passing your objects around - somebody else can change them and you will be affected. For more info check this tutorial (TODO http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/).

Primitive Types

String
Strings are basically Unicode text, 16-bit per character. You may be suprised that string is actually primite value as it is not that common. For example Java uses primitives as well, but String is not a primitive there. Another surprise may be that there is no type representing a single character like in many other languages. You just have to simply use a string with one char instead.

Number
Unlike many other languages, JavaScript has just one type for representing numbers. That means no distinction between integer and decimal values, no distinction between signed and unsigned or single and double precision floating numbers. Javascript uses 64-bit floating point numbers.

Except for regular numberic values, there are also some special values. There is NaN (Not a number), which is a result of operations usch as 0/0. Then there is Infinity, which can be both positive and negative. You can check for minimum and maximum values fo prevent overflow/underflow by Number.MIN_VALUE and Number.MAX_VALUE. And then, of course, ther is +0 and -0 in Javascript (0 is just and alias for +0).

Be careful when working with NaN as this value behaves in an unexpected way - it is the only value in javascript that is not equal to itself, that means you cannot test that something is NaN by

something === NaN //Does not work, always false
NaN === NaN //false

You can use isNaN or Number.IsNaN (ES6+) (TODO link http://adripofjavascript.com/blog/drips/the-problem-with-testing-for-nan-in-javascript.html) instead of direct compariosn.

Boolean
Boolean type contains just two values - true and false.

Symbol
This is a new primitive type introduced in ES6. There is no symbol literal, so all the symbol need to be created using Symbol() function. Each symbol is uniques, which makes them ideal for usage as object properties to avoid clashes. Or in other cases where you need to have unique values.  For more info see this post (TODO link http://exploringjs.com/es6/ch_symbols.html).

Null &amp; Undefined
Both null and undefined are primitive types representing the absence of value. Null is usually explicitly returned and assigned and because of this it generally represents that the value is intentionally missing.

The undefined, on the other hand, means that the value does not exist in cases, such as:
- a variable was declared but not initialized
- return value of methods that d not return anything
- value of function parameters when called did not provide value
- accession a property of object which does not exist

One caveat to watch for and which is confusing is that even though null is a primitive, calling typeof null returns object (TODO LINK https://stackoverflow.com/q/18808226/4560142). In constrast typeof undefined returns undefined.


Object Wrappers
Allright, we know that objects have properties, which you can access using a dot. Like person.name = 'john'. Primitives don't have anything like that, they are just a single value. And string are primitives. How come that the following will work then?

var name = 'John';
console.log(name.length); //prints 4
console.log(name.toUpperCase()); //prints JOHN

String are not objects, you can try it by using:

typeof 'John' //string

Turns out that for certain primitives (number, boolean, string, symbol) JavaScript offers Wrapper objects, which can be used when an object is needed and provide some extra convenience methods. So what happens in the example above:
1. Javascript detects that you are trying to access a property of a string primitive.
2. It creates a wrapper object String to wrap the original string primitive.
3. It accesses the length and toUpperCase on the wrapper object instead of the primitive.
4. Id discards the wrapper object, frees the memory and continues.

This way you can use all the helpful methods on strings to make a substring, convert it to lowercase, split it and so on. Note that primitives are immutable so all these methods just return a new instance of the string and dont modify the original.

Manually creating wrappers
In the example above, JavaScript creates wrapper objects automatically under the hood. There is also a way to create such objects explicitly.

new Number(4)
new String('Hi')
new Boolean(true)

These are not primitives anymore, but objects, which contain the primitve value and add some extra goodies.

typeof 4 //number
typeof 'Hi' //string
typeof true //boolean

typeof new Number(4) //object
typeof String('Hi') //object
typeof Boolean(true) //object

This has some serious implications. You cannot really compare wrapper objects and primitives:

'Hi' === new String('Hi') //false

Also, be aware that objects are considered truthy, that means that you need to watch for this

if(false) {
    //This does not execute
}

if(new Boolean(false)) {
    //This executes
}

Because of this, explicitly creating wrappers using the new keyword is considered a bad practice. On the other hand, calling the function without the new keyword is perfectlyvalid as it just tries to convert the input into the corresponding primitive type and returns a primitive value.

typeof new Number('42') //object, not recommended
typeof Number('42') //number, safe


valueOf and toString
When you are working with objects, there are some cases when you would rather need a primitive representation of the object. Actually, javascript offers two methods for it which each object inherits:

- valueOf() returns primitive representation of the object
- toString() returns string representation of the object

A good example can be Date. toString() returns human readable description of the date, while valueOf returns a number representing the date as number of passed milliseconds since 1 January 1970 00:00:00 UTC and the date.

var date = new Date();
console.log(date.toString()); //Wed Jan 24 2018 14:12:07 GMT+0100 (Central Europe Standard Time)
console.log(date.valueOf()); //1516817671281

You rarely need to call valueOf yourself, but javascript does it under the hood when a primitive is expected, for example when using + operator. You can even define your own implementation of valueOf() and toString():

var john = {
    firstName: 'John',
    lastName: 'Doe',
    age: 45,
    valueOf: function () {
        return this.age;
    },
    toString: function () {
        return `${this.firstName} ${this.lastName}, ${this.age}`
    }
}

console.log(john.toString()) //John Doe, 45
console.log(john+1) //46

Summary
Javascript provides six primitive types - number, boolean, string, null, undefined and symbol. Primitives immutable and are compared by value. When needed Javascript wraps a primitive by an object wrapper. It is not recommended to create these wrapers explicitly. If the conversion needs to be done the other way around - from an object to a prototype, the valueOf method is called to obtain a primitive value. You can use your own implementation of valueOf.]]></wp:comment_content>
        <wp:comment_approved><![CDATA[trash]]></wp:comment_approved>
        <wp:comment_type><![CDATA[]]></wp:comment_type>
        <wp:comment_parent>0</wp:comment_parent>
        <wp:comment_user_id>0</wp:comment_user_id>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1517334753.7679378986358642578125;s:5:"event";s:12:"status-trash";s:4:"user";s:14:"vojtechruzicka";}]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
            <wp:meta_value><![CDATA[0]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
            <wp:meta_value><![CDATA[1517334753]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
            <wp:meta_value><![CDATA[false]]></wp:meta_value>
        </wp:commentmeta>
        <wp:commentmeta>
            <wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
            <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1516800620.83106899261474609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
        </wp:commentmeta>
    </wp:comment>
</item>