<item>
    <title>IntelliJ IDEA Tips &amp; Tricks: Testing RESTful web services with integrated HTTP Client</title>
    <link>http://vojtechruzicka.com/intellij-idea-tips-tricks-testing-restful-web-services/</link>
    <pubDate>Wed, 17 Jan 2018 07:20:37 +0000</pubDate>
    <dc:creator><![CDATA[vojtechruzicka]]></dc:creator>
    <guid isPermaLink="false">http://vojtechruzicka.com/?p=1389</guid>
    <description></description>
    <content:encoded><![CDATA[<img class="aligncenter size-full wp-image-356" src="http://vojtechruzicka.com/wp-content/uploads/2016/05/IntelliJIDEA_icon.png" alt="" width="1184" height="612" />
<p style="text-align: justify;">It is often useful to be able to send HTTP requests directly from your IDE. IntelliJ Idea offers full-fledged HTTP client which you can use without the need of a dedicated external client.</p>
<!--more-->
<h2>Integrated HTTP Client</h2>
<p style="text-align: justify;">You often need to call an HTTP endpoint and examine the response received. In more complicated scenarios you need to use various HTTP methods, send HTTP Headers or cookies. While there are many dedicated programs just for this, IDEA offers this feature out of the box, which is much more convenient. The IDE actually offers two main ways to do so.</p>

<div></div>
<h2>The Old Way - Test RESTFul Web Service</h2>
<p style="text-align: justify;">This feature has been in IDEA for quite some time. You can access the REST client by going to:</p>

<pre lang="json"> Tools → Test Restful Web Service</pre>
<p style="text-align: justify;">This will open a new tool window called REST client.</p>

<div></div>
<div><img class="aligncenter size-full wp-image-1417" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/idea-rest-client.png" alt="" width="889" height="307" /></div>
<div></div>
<p style="text-align: justify;">The usage is pretty straightforward and similar to many other HTTP clients. First, you need to specify an HTTP method (GET/POST/PUT/...), target URL and path. <span style="text-align: justify;">You can provide additional data on the </span><em style="text-align: justify;">Request</em> tab, such as HTTP headers, request parameters, and body. You can also specify cookies to be sent on a separate <em style="text-align: justify;">Cookies</em> tab.</p>

<div>
<div></div>
<div><img class="aligncenter size-full wp-image-1418" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/cookies.png" alt="" width="767" height="302" /></div>
<div></div>
</div>
<p style="text-align: justify;">And then you just hit <em>Submit Request</em>. IDEA sends a new HTTP request to the target location and displays the response received in the <em>Response</em> tab. Response headers can be viewed in the <em>Response Headers</em> tab.</p>

<div></div>
<div><img class="aligncenter size-full wp-image-1419" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/response.png" alt="" width="770" height="287" /></div>
<div></div>
<div>
<p style="text-align: justify;">And that's pretty much it. On top of this, the client offers some additional features such as:</p>

<ul>
 	<li style="text-align: justify;">Importing and exporting request from/to an XML file. This can be handy when reporting bugs, so the issue can be easily reproduced. And also to persist request between starts of IDEA as REST client's state is not preserved.</li>
 	<li style="text-align: justify;">You can generate basic authentication header from a username and password.</li>
 	<li style="text-align: justify;">Request/response history is saved.</li>
 	<li style="text-align: justify;">Integration with JAX-RS - IDEA can detect your @Path annotations and offer them in the path field, so you don't have to manually search for the value.</li>
 	<li style="text-align: justify;">Code completion for common HTTP headers.</li>
</ul>
<h2>The New Way - Using Http Request File</h2>
<p style="text-align: justify;">Even though the REST client is no doubt useful, it has some shortcomings. It is quite cumbersome to add values such as cookies or HTTP headers. You have to do a lot of clicking and moving around before you create a request. In IntelliJ IDEA 2017.3, there is a new way to send HTTP requests, which is simpler and yet more powerful. It is HTTP Request file and it uses HTTP client directly in the Editor window.</p>

<div></div>
<h3>Getting started</h3>
<p style="text-align: justify;">The easiest way to start is just to add a file with <em>.http</em> extension to your project. The name does not matter, just the extension. Alternatively, you can right-click a directory and select <em>New → HTTP Request</em>. This file will be a source file for the new Editor-based HTTP client. Since it is an ordinary file, it will persist between IDE starts, no need to export/import XML files as before. Moreover, it can be shared with other devs or committed to version control.</p>

<div></div>
<p style="text-align: justify;">Sometimes it can be handy to have the requests stored permanently. In other cases not. If you need just a quick test and create one or two throwaway requests, which will not be reused, it is much better to use a <a href="https://blog.jetbrains.com/idea/2014/09/intellij-idea-14-eap-138-2210-brings-scratch-files-and-better-mercurial-integration/">scratch file</a>. Just press <em>Ctrl + Shift + Alt + Insert</em> to open the<em> New Scratch file</em> dialog. Then select <em>HTTP Request</em>.</p>

<div style="text-align: justify;"></div>
<p style="text-align: justify;">No matter which variant you use, the usage will be the same, only the persistence of the file is different.</p>

</div>
<div></div>
<div>
<h3>A simple request</h3>
<p style="text-align: justify;">The simplest thing you can do is just to type a URL and click Run icon in the gutter. Or alternatively,<em> Alt + Enter</em> and <em>Run</em>.</p>

<div></div>
<img class="aligncenter size-full wp-image-1420" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/run.png" alt="" width="314" height="65" />
<div></div>
<p style="text-align: justify;">When no HTTP method is specified, it assumes you want to use GET. No headers or parameters are sent. Then the response is displayed:</p>

<div></div>
<img class="aligncenter size-full wp-image-1421" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/response-httprequest.png" alt="" width="488" height="227" />
<div></div>
</div>
<div>
<h3>HTTP Methods and headers</h3>
<p style="text-align: justify;">For simple GET requests, you are already covered. But often you need something more complicated. First of all, you will need other methods than just GET. To specify an HTTP method, simply add its name before the URL:</p>

<div></div>
<pre lang="json">GET http://localhost:8090/persons/all</pre>
<div></div>
<p style="text-align: justify;">Then you'll need a bunch of HTTP headers. just add them below the URL, one per line as a key-value pairs separated by a colon. Since cookies are just HTTP header, you can include them with the other headers.</p>

<pre lang="json">GEThttp://localhost:8090/persons/all
Accept-Language:en-US,en;q=0.9
Authorization:BasicQWxhZGRpbjpvcGVuIHNlc2FtZQ==
Cookie: name=value; name2=value2; name3=value3
</pre>
<h3>Adding body</h3>
<div></div>
<p style="text-align: justify;">But HTTP headers are not enough. For methods such as POST, you'll also want to specify body the of the request. You can do so by leaving one blank line after the end of the request declaration. The body can be multiline. You can have multiple requests in one file and separate them by a line with ###.</p>

<div></div>
<pre lang="json">POST http://localhost:8090/persons/add/
Content-Type:'application/json'

{
    "name":"JohnDoe",
    "age":29
}
</pre>
<div style="text-align: justify;"></div>
<p style="text-align: justify;">Alternatively, you can specify, that the body should be read from an external file. To do this, you need to provide left angle bracket followed by space and the path to the file.</p>

<pre lang="json">POST http://localhost:8090/persons/add/
Content-Type:'application/json'

< person.json
</pre>
<p style="text-align: justify;">Note that IDEA will help you with autocomplete for both existing files for body and HTTP Headers. What’s more, if you specify content type and the body of the request, IDEA automatically treats the request body as if it was written in that language. That means if you choose XML for example, it will check validity, autocomplete tags for you and all the other language-specific features available in the editor. Also, you can include comments in the file using #. It is useful for documenting some special HTTP headers or parameters for example.</p>

<h3>Environmental variables</h3>
<p style="text-align: justify;">Your application is usually deployed in multiple environments. You start developing locally, then it gets deployed to Development Environment, UAT and eventually Production. The names and number of the environments can vary, but what is certain is there is more than one. When using HTTP client, the requests are usually almost identical among the environments, except for several environment-specific variables, such as URL.</p>
<p style="text-align: justify;">IDEA allows you to reuse the same requests among multiple environments by specifying environmental variables and then using placeholders for the variables. Then it is really easy to switch between environments.</p>
<p style="text-align: justify;">The environments and their variables are defined in a file called<em> rest-client.env.json</em>. It is not supplied by default, so you need to create one. Bellow is the example of three environments with different host variable.</p>

<pre lang="json">{
   "local":{
      "host":"localhost"
   },
   "development":{
      "host":"dev.example.com"
   },
   "production":{
      "host":"example.com"
   }
}
</pre>
In your HTTP Requests file (even scratch) you can then reference variables surrounded by double curly braces:
<pre lang="json">GET http://{{host}}:8090/persons/all/</pre>
You can run specific configuration by right-clicking the run icon in the gutter:

<img class="aligncenter size-full wp-image-1436" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/run-environments.png" alt="" width="354" height="114" />
<h3>HTTP Proxy</h3>
<p style="text-align: justify;">In case you need HTTP proxy for your calls, the client shared proxy settings of the whole IDE, which can be configured under Appearance &amp; Behavior <em>→</em> System Settings <em>→</em> HTTP Proxy.</p>

<div></div>
<h2>History</h2>
<p style="text-align: justify;">What’s cool is that IDEA automatically stores the history of all the requests you performed (up to 50 items). It is available from <em>Tools → Show HTTP Requests history</em>. What it actually does is that it opens a file called http<em>-requests-log.http</em> in <em>.idea/httpRequests</em> folder. It can look something like this:</p>

<pre lang="json">POST http://localhost:8090/persons/add
Content-Type: 'application/json'

< C:/_MY/rest-demo/person.json

<> 2018-01-11T032255.200.txt

###

GET <a href="http://localhost:8090/persons/all">http://localhost:8090/persons/all

<> 2018-01-11T115612.200.json

###
</a></pre>
<p style="text-align: justify;">The really nice thing is that it is just another <em>.http</em> file. That means that you can directly execute the requests from there again and it uses the same syntax. Second cool thing is that it preserves not only requests but also responses (response bodies only, unfortunately). Each Response body is saved in a separated file indicated by angle brackets. The type of the file corresponds to the received content type, so here it is JSON, but it can be HTML or something else. You can navigate to the response file by <em>CTRL+Click</em>. Actually, the same response information is also shown in scratch files, but not in physical <em>.http</em> files. When performing the same request multiple times, the response info is preserved for each invocation. Then you can easily compare two of the responses by IDEA's integrated DIFF tool.</p>

<div></div>
<div>
<div></div>
<div><img class="aligncenter size-full wp-image-1422" src="http://vojtechruzicka.com/wp-content/uploads/2018/01/compare.png" alt="" width="341" height="255" /></div>
<div></div>
It is nice that the same history and log are used both for the new editor based HTTP Request files and the old REST Client, which runs in a separate tool window.

</div>
<div></div>
<h2>Conclusion</h2>
<div style="text-align: justify;">IDEA’s integrated HTTP client capabilities are now stronger than ever with the new HTTP Request files. What’s so cool about them is the fact that it is not an HTTP client in a separate tool window with various tabs, text-fields, and buttons, but everything happens directly in the Editor window. That means you get all the goodies such as autocomplete or language injection. And it is much simpler and quicker to use as you don’t have to navigate a complicated UI. That means that it is much easier to use it with keyboard only also. This is the state as of IDEA 2017.3, according to the JetBrains, we have many more features to look forward to in the future releases.</div>
</div>]]></content:encoded>
    <excerpt:encoded><![CDATA[]]></excerpt:encoded>
    <wp:post_id>1389</wp:post_id>
    <wp:post_date><![CDATA[2018-01-17 08:20:37]]></wp:post_date>
    <wp:post_date_gmt><![CDATA[2018-01-17 07:20:37]]></wp:post_date_gmt>
    <wp:comment_status><![CDATA[open]]></wp:comment_status>
    <wp:ping_status><![CDATA[open]]></wp:ping_status>
    <wp:post_name><![CDATA[intellij-idea-tips-tricks-testing-restful-web-services]]></wp:post_name>
    <wp:status><![CDATA[publish]]></wp:status>
    <wp:post_parent>0</wp:post_parent>
    <wp:menu_order>0</wp:menu_order>
    <wp:post_type><![CDATA[post]]></wp:post_type>
    <wp:post_password><![CDATA[]]></wp:post_password>
    <wp:is_sticky>0</wp:is_sticky>
    <category domain="category" nicename="intellij-idea"><![CDATA[Intellij IDEA]]></category>
    <category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
        <wp:meta_value><![CDATA[11]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_title]]></wp:meta_key>
        <wp:meta_value><![CDATA[IntelliJ IDEA Tips & Tricks: Integrated HTTP Client]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
        <wp:meta_value><![CDATA[356]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
        <wp:meta_value><![CDATA[90]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_jetpack_related_posts_cache]]></wp:meta_key>
        <wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1517389200;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:1487;}i:1;a:1:{s:2:"id";i:1159;}i:2;a:1:{s:2:"id";i:991;}}}}]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
        <wp:meta_value><![CDATA[It is often useful to be able to send HTTP requests directly from your IDE. IntelliJ Idea offers full-fledged HTTP client which you can use without the need of a dedicated external client.]]></wp:meta_value>
    </wp:postmeta>
    <wp:postmeta>
        <wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
        <wp:meta_value><![CDATA[1]]></wp:meta_value>
    </wp:postmeta>
</item>